// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: collector.proto

package collector_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectorServiceV1_AddCall_FullMethodName    = "/collector_v1.CollectorServiceV1/AddCall"
	CollectorServiceV1_GetCalls_FullMethodName   = "/collector_v1.CollectorServiceV1/GetCalls"
	CollectorServiceV1_AddService_FullMethodName = "/collector_v1.CollectorServiceV1/AddService"
)

// CollectorServiceV1Client is the client API for CollectorServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorServiceV1Client interface {
	// Добавление нового вызова
	AddCall(ctx context.Context, in *AddCallRequest, opts ...grpc.CallOption) (*AddCallResponse, error)
	// Получение статистики вызовов
	GetCalls(ctx context.Context, in *GetCallsRequest, opts ...grpc.CallOption) (*GetCallsResponse, error)
	// Добавление нового сервиса
	AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*AddServiceResponse, error)
}

type collectorServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCollectorServiceV1Client(cc grpc.ClientConnInterface) CollectorServiceV1Client {
	return &collectorServiceV1Client{cc}
}

func (c *collectorServiceV1Client) AddCall(ctx context.Context, in *AddCallRequest, opts ...grpc.CallOption) (*AddCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCallResponse)
	err := c.cc.Invoke(ctx, CollectorServiceV1_AddCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceV1Client) GetCalls(ctx context.Context, in *GetCallsRequest, opts ...grpc.CallOption) (*GetCallsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCallsResponse)
	err := c.cc.Invoke(ctx, CollectorServiceV1_GetCalls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceV1Client) AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*AddServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddServiceResponse)
	err := c.cc.Invoke(ctx, CollectorServiceV1_AddService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServiceV1Server is the server API for CollectorServiceV1 service.
// All implementations must embed UnimplementedCollectorServiceV1Server
// for forward compatibility.
type CollectorServiceV1Server interface {
	// Добавление нового вызова
	AddCall(context.Context, *AddCallRequest) (*AddCallResponse, error)
	// Получение статистики вызовов
	GetCalls(context.Context, *GetCallsRequest) (*GetCallsResponse, error)
	// Добавление нового сервиса
	AddService(context.Context, *AddServiceRequest) (*AddServiceResponse, error)
	mustEmbedUnimplementedCollectorServiceV1Server()
}

// UnimplementedCollectorServiceV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectorServiceV1Server struct{}

func (UnimplementedCollectorServiceV1Server) AddCall(context.Context, *AddCallRequest) (*AddCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCall not implemented")
}
func (UnimplementedCollectorServiceV1Server) GetCalls(context.Context, *GetCallsRequest) (*GetCallsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalls not implemented")
}
func (UnimplementedCollectorServiceV1Server) AddService(context.Context, *AddServiceRequest) (*AddServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (UnimplementedCollectorServiceV1Server) mustEmbedUnimplementedCollectorServiceV1Server() {}
func (UnimplementedCollectorServiceV1Server) testEmbeddedByValue()                            {}

// UnsafeCollectorServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServiceV1Server will
// result in compilation errors.
type UnsafeCollectorServiceV1Server interface {
	mustEmbedUnimplementedCollectorServiceV1Server()
}

func RegisterCollectorServiceV1Server(s grpc.ServiceRegistrar, srv CollectorServiceV1Server) {
	// If the following call pancis, it indicates UnimplementedCollectorServiceV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectorServiceV1_ServiceDesc, srv)
}

func _CollectorServiceV1_AddCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceV1Server).AddCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorServiceV1_AddCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceV1Server).AddCall(ctx, req.(*AddCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorServiceV1_GetCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceV1Server).GetCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorServiceV1_GetCalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceV1Server).GetCalls(ctx, req.(*GetCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorServiceV1_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceV1Server).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorServiceV1_AddService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceV1Server).AddService(ctx, req.(*AddServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectorServiceV1_ServiceDesc is the grpc.ServiceDesc for CollectorServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector_v1.CollectorServiceV1",
	HandlerType: (*CollectorServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCall",
			Handler:    _CollectorServiceV1_AddCall_Handler,
		},
		{
			MethodName: "GetCalls",
			Handler:    _CollectorServiceV1_GetCalls_Handler,
		},
		{
			MethodName: "AddService",
			Handler:    _CollectorServiceV1_AddService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector.proto",
}
